`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: TRIUMF
// Engineer: Shengli Liu
// 
// Create Date:    11:14:18 03/07/2016 
// Design Name: 
// Module Name:    Buf_SigProcs 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: top module of Circular buffer, BLR_Gain, Power calculation, etc, 
//              the purpose of this packaging is to make simulation seperatly from MB and ADC deserilize.
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module Buf_SigProcs(
	input [63:0] data_in,	//data from deserializer
	input gclk0,   //ADC data clk, 100MHz ~ 125 MHz
	input clk,     //slow processing clk, 1MHz ~ 10 MHz
	input rst,
	
	input ex_trig,
	
	input MB_bus_Clk, 
	input fifo_rd_ab,
	input fifo_rd_cd,
	
	output [FIFO_DEPTH-1:0] AB_fifo_word,
	output [FIFO_DEPTH-1:0] CD_fifo_word,
	
	output [4*ADC_BIT_WIDTH-1:0] fast_fifo_dout,

   input sFIFO_rd,
	output [5:0] slow_fifo_wd,
	output [SFIFO_WIDTH-1:0] slow_fifo_dout,
	
	
	input [DATA_WIDTH-1:0] Trig_TH_Reg,
	input [DATA_WIDTH-1:0] Trig_DT_Reg,
	input [DATA_WIDTH-1:0] Evt_Len_Reg,  //Event Length in samples reg
   input [DATA_WIDTH-1:0] Evt_Tail_Len_Reg,  //Event tail length in samples reg
	input [DATA_WIDTH-1:0] BL_Len_Reg,  //Event tail length in samples reg
	
	
	output [DATA_WIDTH-1:0]status_net,
   input  [DATA_WIDTH-1:0]control_reg,
   
	inout SDA,
	output SCL,

   
	output trig_out,
   output busy//to prevent the Fast fifo to be readout by MB
	
    );

parameter  	ADC_BIT_WIDTH = 16;
parameter  	DATA_WIDTH = 16;
parameter  	FIFO_DEPTH = 11;
parameter   SFIFO_WIDTH = 32;
parameter  	SF_WIDTH = 32;
 
/////////////////////////////////////////////////////////////
//====================== chipScope components================
////////////////////////////////////////////////////////////
wire [35:0] ila_CONTROL0,ila_CONTROL1;

icon icon_test (
    .CONTROL0(ila_CONTROL0), // INOUT BUS [35:0]
	 .CONTROL1(ila_CONTROL1)
);
 

wire trig;
wire wTrig;
assign trig_out = wTrig;

wire rd_C_buffer;
wire event_rdy;

wire RUN = control_reg[0];
wire EX_TRIG_MODE = control_reg[1];
//control_reg[15] to be used for reset Buf_SigProcs module



wire [4*ADC_BIT_WIDTH-1:0] dout_all;

wire [ADC_BIT_WIDTH-1:0] buffer_dout_a = dout_all[15:0];
wire [ADC_BIT_WIDTH-1:0] buffer_dout_b = dout_all[31:16];
wire [ADC_BIT_WIDTH-1:0] buffer_dout_c = dout_all[47:32];
wire [ADC_BIT_WIDTH-1:0] buffer_dout_d = dout_all[63:48];

x4_Channel_buffer Circular_Buffer (
//    .ila_control(ila_CONTROL0),
    .DIN(data_in), 
	 .EVENT_LEN(Evt_Len_Reg),
	 .TAIL_LEN(Evt_Tail_Len_Reg),
	 .RST(rst),
	 .TRIG(trig),
    .WRCLK(gclk0), 
    .RDCLK(clk), 
    .RD(rd_C_buffer),  
 
    .EVENT_RDY(event_rdy),  //output,event ready
    .DOUT(dout_all)
    
    ); 

trigger Trigger(
   .RUN(RUN),
	.EX_TRIG_MODE(EX_TRIG_MODE),
	.DATAIN(data_in),	//ADC raw data from deserializer
	.CLK(gclk0),
	.RESET(rst),
	.EXT_TRIG(ex_trig),
	.THRESHOLD(Trig_TH_Reg),
	.DEAD_TIME(Trig_DT_Reg),
	.TRIG(trig)
);



wire data_BL_valid;
wire BLG_data_valid;
wire BL_updated;
wire BLR_busy;
wire clr_fast_fifo;
assign busy = BLR_busy;

wire [4*ADC_BIT_WIDTH-1:0] BLR_dout_all;
wire [4*ADC_BIT_WIDTH-1:0] BL;


base_line BL_cal(
   .in_valid(data_BL_valid),
	.din(dout_all),
	.clk(clk),
	.rst(rst),
	.out_valid(BL_updated),
	.BL_data(BL)
	);


wire skip_BLR;
wire wr_fast_fifo;

BLR_GAIN BLR_ADJ(
   .RUN(RUN),
   .rst(rst),
	.clk(clk),

	.BL(BL),        //input: calculated based line
   .BL_update(BL_updated), // 

//for quick compiling only
//.BL(64'b0),
//.BL_update(1'b1),


	.skip_BLR(skip_BLR),
	.din(dout_all), //input from Circular buffer
	.BL_Len_Reg(BL_Len_Reg),
	
	.event_rdy(event_rdy),  //input from Circular buffer
	.rd(rd_C_buffer),    		//output, read Circular channel buffer 
	.wr(wr_fast_fifo),   //output, write Fast fifo
	
	.data_BL_valid(data_BL_valid), // mark the data for Base line calculation
	.data_valid(BLG_data_valid),      //mark the data after BLR and Gain adj. is present on bus
	.busy(BLR_busy),          //to prevent the Fast fifo to be readout by MB
	.clr_fast_fifo(clr_fast_fifo), //clr the fast fifo so it keeps fresh if not been read out
	.dout(BLR_dout_all)
    );

//Fast FIFO to transfer ADC rate data from FPGA to MB
//Individual channel data could not be read out seperately, read one channel will cause the other 3 channel 
//data get lost.

wire fast_fifo_full,fast_fifo_empty;

wire [4*ADC_BIT_WIDTH-1:0] fast_fifo_din = control_reg[8]?  BLR_dout_all
                   : dout_all
                   ;						 
assign skip_BLR = control_reg[9];
assign status_net[DATA_WIDTH-1:0] = {14'b0,fast_fifo_full,RUN};

wire fast_FIFO_rst = rst | clr_fast_fifo;

FIFO_data Fast_FIFO_ChAB (
  .rst(fast_FIFO_rst), // 
  .wr_clk(clk), // 
  .rd_clk(MB_bus_Clk), // 
  .din(fast_fifo_din[31:0]), // input [31 : 0] din
  .wr_en(wr_fast_fifo), //
  .rd_en(fifo_rd_ab),
  .dout(fast_fifo_dout[31:0]), // output [31 : 0] dout
  .full(fast_fifo_full), // 
  .empty(fast_fifo_empty),
  .wr_data_count(AB_fifo_word)  // 
);

FIFO_data Fast_FIFO_ChCD (
  .rst(fast_FIFO_rst), // 
  .wr_clk(clk), // 
  .rd_clk(MB_bus_Clk), // 
  .din(fast_fifo_din[63:32]), // input [31 : 0] din
  .wr_en(wr_fast_fifo), //
  .rd_en(fifo_rd_cd),
  .dout(fast_fifo_dout[63:32]), // output [31 : 0] dout
  .full(), // 
  .empty(),
  .wr_data_count(CD_fifo_word)  // 
);

wire [SF_WIDTH-1:0] ChA_Power;
wire [SF_WIDTH-1:0] ChB_Power;
wire [SF_WIDTH-1:0] ChC_Power;
wire [SF_WIDTH-1:0] ChD_Power;

reg [SF_WIDTH-1:0] ChA_Power_reg;
reg [SF_WIDTH-1:0] ChB_Power_reg;
reg [SF_WIDTH-1:0] ChC_Power_reg;
reg [SF_WIDTH-1:0] ChD_Power_reg;



wire Power_rdy; 
wire [15:0] Total_N;

Power_rms ChA_Power_inst(
	.Data_In(BLR_dout_all[15:0]),
	.Data_In_Valid(BLG_data_valid),
	.clk(clk),
	.rst(rst),
	
	.RMS(ChA_Power),
	.Total_N(Total_N),
	.RDY(Power_rdy)
);	

Power_rms ChB_Power_inst(
	.Data_In(BLR_dout_all[31:16]),
	.Data_In_Valid(BLG_data_valid),
	.clk(clk),
	.rst(rst),
	
	.RMS(ChB_Power),
	.RDY()
);	

Power_rms ChC_Power_inst(
	.Data_In(BLR_dout_all[47:32]),
	.Data_In_Valid(BLG_data_valid),
	.clk(clk),
	.rst(rst),
	
	.RMS(ChC_Power),
	.RDY()
);	

Power_rms ChD_Power_inst(
	.Data_In(BLR_dout_all[63:48]),
	.Data_In_Valid(BLG_data_valid),
	.clk(clk),
	.rst(rst),
	
	.RMS(ChD_Power),
	.RDY()
);	

always @ (posedge clk)
  begin
	 if (Power_rdy ) 
	    begin
		   ChA_Power_reg <= ChA_Power;
			ChB_Power_reg <= ChB_Power;
			ChC_Power_reg <= ChC_Power;
			ChD_Power_reg <= ChD_Power;	
			
		 end

  end

///// Position/////////////////
wire position_rdy;
wire [SF_WIDTH-1:0] X,Y,S;
reg [DATA_WIDTH-1:0] X_reg,Y_reg,S_reg; 

position position_inst(
	.clk(clk),
	.rst(rst),
	.data_valid(Power_rdy),
	.A_IN(ChA_Power), //32 bit sf
	.B_IN(ChB_Power),
	.C_IN(ChC_Power),
	.D_IN(ChD_Power),
	.Diameter(BPM_Dia),
	.X(X),
	.Y(Y),
	.S(S),
	.rdy(position_rdy)
    );

always @ (posedge clk)
  begin
	 if (position_rdy ) 
	    begin
		   X_reg <= X[DATA_WIDTH-1:0];
			Y_reg <= Y[DATA_WIDTH-1:0];
			S_reg <= S[DATA_WIDTH-1:0];
						
		 end

  end
  
////////////////temperature reading/////////////////////
//upate temperature once triggered
wire temp_rdy;

wire [DATA_WIDTH-1:0] chA_temp;
wire [DATA_WIDTH-1:0] chB_temp;
wire [DATA_WIDTH-1:0] chC_temp;
wire [DATA_WIDTH-1:0] chD_temp;

reg [DATA_WIDTH-1:0] chA_temp_reg;
reg [DATA_WIDTH-1:0] chB_temp_reg;
reg [DATA_WIDTH-1:0] chC_temp_reg;
reg [DATA_WIDTH-1:0] chD_temp_reg;


always @ (posedge clk)
  begin
	 if (temp_rdy ) 
	    begin
		   chA_temp_reg <= chA_temp;
			chB_temp_reg <= chB_temp;
			chC_temp_reg <= chC_temp;
			chD_temp_reg <= chD_temp;	
			
		 end

  end
  
ADS1015 temperature(
 //  .ila_CONTROL0(ila_CONTROL0),
	.clk(clk), //slow clock 10MHz
	.request(Power_rdy),
	.rst(rst),
	.SDA(SDA),
	.SCL(SCL),
	.rdy(temp_rdy), //output a ready signal when 
	.chA_temp(chA_temp),
	.chB_temp(chB_temp),
	.chC_temp(chC_temp),
	.chD_temp(chD_temp)
);

//=================pulse strech fast trig==============

pulse_strecher trig_pulse(
   .rst(rst),
	.trig(trig), //1 gclk0 wide
	.gclk0(gclk0),
	.clk(clk),
	.wTrig(wTrig) //1 clk wide
    );

///================ Slow FIFO ===================
reg sFIFO_wr;
wire esFIFO_half_full;
reg [SFIFO_WIDTH-1:0] sfifo_data_in;
ccd_fifo Slow_FIFO (
    .rst(rst),
    .din(sfifo_data_in), 
    .wr_clk(clk), 
    .rd_clk(MB_bus_Clk), 
	 .wr_en(sFIFO_wr),
	 .rd_en(sFIFO_rd),
    .dout(slow_fifo_dout), 
    .wr_data_count(slow_fifo_wd), // output [5 : 0] wr_data_count
    .prog_full(sFIFO_half_full)

    );
	 
//============Packing=================================
parameter PID = 32'h4142504d; //"ABPM"
parameter PACKET_LEN = 16'd16;

reg [SFIFO_WIDTH-1:0] EVT_CNT;
reg EVT_state;

always @(posedge clk)
	begin
		if(rst) 
			begin
				EVT_CNT <= 0;
				EVT_state <= 0;
			end
		
		else
			begin
				case(EVT_state)
					0:
					if(wTrig) EVT_state <= 1;
					
					1:
					begin
						EVT_CNT <= EVT_CNT + 1;
						EVT_state <= 0;
					end
					
					default:
						EVT_state <= 0;
				endcase
			end		
	
	end

reg [7:0] p_state;


always @(posedge clk)
	begin
		if(rst) 
			begin
				p_state <= 0;
				sFIFO_wr<= 0;
				//EVT_state <= 0;
			end
		
		else
			begin
				case(p_state)
					0:if(position_rdy && !sFIFO_half_full) begin  sFIFO_wr<= 1; sfifo_data_in <= PID; p_state <= 1; end
					 
					1: begin sfifo_data_in <= EVT_CNT; p_state <= 2; end
					2: begin sfifo_data_in <= {status_net,PACKET_LEN}; p_state <= 3; end
					3: begin sfifo_data_in <= 32'b0; p_state <= 4; end //Real time 
					4: begin sfifo_data_in <= {chA_temp_reg,chB_temp_reg}; p_state <= 5; end
					5: begin sfifo_data_in <= {chC_temp_reg,chD_temp_reg}; p_state <= 6; end
					6: begin sfifo_data_in <= ChA_Power_reg; p_state <= 7; end
					7: begin sfifo_data_in <= ChB_Power_reg; p_state <= 8; end
					8: begin sfifo_data_in <= ChC_Power_reg; p_state <= 9; end
					9: begin sfifo_data_in <= ChD_Power_reg; p_state <= 10; end
					10: begin sfifo_data_in <= {X_reg,Y_reg}; p_state <= 11; end
					11: begin sfifo_data_in <= {S_reg,16'b0}; p_state <= 12; end
					12: begin sfifo_data_in <= 0; p_state <= 13; end
					13: begin sfifo_data_in <= 0; p_state <= 14; end
					14: begin sfifo_data_in <= 0; p_state <= 15; end
					15: begin sfifo_data_in <= 0; p_state <= 16; end
					16: begin sFIFO_wr<= 0; p_state <= 0; end
					
					default:
						p_state <= 0;
				endcase
			end		
	
	end




/////////////// ChipScope /////////////////////

wire [7:0] ila_trig = {6'b0,wTrig,position_rdy};

wire [63:0] ila_data;
//assign ila_data[15:0] = dout_all[15:0];
assign ila_data[31:0] = sfifo_data_in;
assign ila_data[47:32] = {2'b0,slow_fifo_wd,p_state};


assign ila_data[63] = position_rdy; 
assign ila_data[62] = sFIFO_half_full;
assign ila_data[61] = sFIFO_wr;
assign ila_data[60] = BL_updated;

/*
assign ila_data[63] = BLR_busy; 
assign ila_data[62] = event_rdy;
assign ila_data[61] = wr_fast_fifo;
assign ila_data[60] = BL_updated;
assign ila_data[59] = BLG_data_valid;
assign ila_data[58] = Power_rdy;
assign ila_data[57] = data_BL_valid;
assign ila_data[56] = Power_rdy;
assign ila_data[55] = rd_C_buffer;
*/



ila_trig8 ila_trig8_inst (
    .CONTROL(ila_CONTROL0), // INOUT BUS [35:0]
    .CLK(clk), // IN
    .TRIG0(ila_trig), // IN BUS [7:0]
	 .DATA(ila_data) // IN BUS [63:0]
);



ila_trig8 ila_trig8_fast_inst (
    .CONTROL(ila_CONTROL1), // INOUT BUS [35:0]
    .CLK(gclk0), // IN
    .TRIG0({6'b0,temp_rdy,trig}), // IN BUS [7:0]
	 .DATA({chB_temp,chA_temp,data_in[31:0]}) // IN BUS [63:0]
);


endmodule
